
//listing of all techniques and passes with embedded asm listings 

technique FlatShader
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
            //
            // Parameters:
            //
            //   float4x4 mMVP;
            //   float4 vColor;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   mMVP         c0       4
            //   vColor       c4       1
            //
            
                vs_3_0
                def c5, 1, 0, 0, 0
                dcl_position v0  // input<0,1,2>
                dcl_position o0
                dcl_color o1
            
            #line 28 "E:\Riccardo\Software\Phoenix\phoenix_main\Resources\Shaders\hlsl9\FlatShader.fx"
                mul r0, c5.xxxy, v0.xyzx
                add r0, r0, c5.yyyx
                dp4 r1.x, r0, c0  // ::output<0>
                dp4 r1.y, r0, c1  // ::output<1>
                dp4 r1.z, r0, c2  // ::output<2>
                dp4 r1.w, r0, c3  // ::output<3>
                mov r0, c4  // ::output<4,5,6,7>
                mov o0, r1  // ::VS<0,1,2,3>
                mov o1, r0  // ::VS<4,5,6,7>
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                ps_3_0
                dcl_color v0  // input<4,5,6,7>
            
            #line 36 "E:\Riccardo\Software\Phoenix\phoenix_main\Resources\Shaders\hlsl9\FlatShader.fx"
                mov oC0, v0  // ::PS<0,1,2,3>
            
            // approximately 1 instruction slot used
            };
    }
}

